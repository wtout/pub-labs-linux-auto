---
# tasks file for amp_connector
- name: Main amp_connector block
  when:
    - install_connector | default(false) | bool or remove_connector | default(false) | bool
  tags: ['never', 'amp_connector']
  block:
    - name: Checking if VM exists
      block:
        - name: Check if VM exists
          community.vmware.vmware_guest_info:
            hostname: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['address'] }}"
            username: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['username'] }}"
            password: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['password'] }}"
            datacenter: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] }}"
            name: "{{ vm.name }}"
            schema: vsphere
            validate_certs: false
          no_log: true
          delegate_to: localhost
      rescue:
        - name: Define ac_creds_status
          ansible.builtin.set_fact:
            ac_creds_status: 'The VM does not exist'
    - name: Check original credentials
      when:
        - ac_creds_status | default('') == ''
      block:
        - name: Check VM credentials
          ansible.builtin.wait_for_connection:
            timeout: 3
          register: ac_vm_creds
          check_mode: false
      rescue:
        - name: Define ac_creds_status
          ansible.builtin.set_fact:
            ac_creds_status: 'The VM IP address is invalid'
          when:
            - ac_vm_creds.msg is defined
            - ac_vm_creds.msg is search('Failed to connect to the host via ssh|Data could not be sent to remote host')
        - name: Check service account credentials
          when:
            - ac_vm_creds.msg is defined
            - ac_vm_creds.msg is search('Invalid/incorrect')
          block:
            - name: Switch to {{ vm_admin_user + ' user' }}
              ansible.builtin.set_fact:
                ansible_user: "{{ vm_admin_user }}"
                ansible_ssh_pass: "{{ vm_admin_pass }}"
                ansible_become_pass: "{{ vm_admin_pass }}"
              no_log: true
            - name: Check updated VM credentials
              ansible.builtin.wait_for_connection:
                timeout: 3
              check_mode: false
          rescue:
            - name: Define ac_creds_status
              ansible.builtin.set_fact:
                ac_creds_status: 'The VM credentials are invalid'
    - name: Assert that credentials are valid
      ansible.builtin.assert:
        that:
          - ac_creds_status | default('') is not search('invalid')
          - ac_creds_status | default('') is not search('does not exist')
        fail_msg: "{{ ac_creds_status | default('') }}"
    - name: Get the Linux distribution
      ansible.builtin.setup:
        filter:
          - 'distribution*'
      when:
        - ansible_facts.distribution is not defined or ansible_facts.distribution == ''
    - name: Install connector
      ansible.builtin.include_tasks: task_install_connector.yml
      when: install_connector | default(false)
    - name: Remove connector
      ansible.builtin.include_tasks: task_remove_connector.yml
      when: remove_connector | default(false)
