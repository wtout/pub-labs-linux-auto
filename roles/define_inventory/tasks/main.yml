---
# tasks file for define_inventory
- name: Main block
  tags: ['always', 'define_inventory']
  check_mode: false
  block:
    - name: Read build definition
      ansible.builtin.include_vars:
        file: "{{ auto_dir + '/' + SYS_NAME }}"
        name: 'environment_definition'

    - name: Display environment_definition
      ansible.builtin.debug:
        var: environment_definition

    - name: Check if required variables are defined
      ansible.builtin.set_fact:
        bn: "{{ 'Build name is not defined' if (environment_definition.build.name is not defined or environment_definition.build.name == none) else '' }}"
        dm: "{{ 'Deployment model is not defined' if (environment_definition.build.deployment_model is not defined or \
          environment_definition.build.deployment_model == none) else '' }}"
        dr: "{{ 'Disaster recovery is not defined' if (environment_definition.build.disaster_recovery is not defined or \
          environment_definition.build.disaster_recovery == none) else '' }}"
        pnv: "{{ 'Primary number of vms is not defined' if (environment_definition.build.primary.number_of_lnxvm is not defined or \
          environment_definition.build.primary.number_of_lnxvm == none) else '' }}"
        pnp: "{{ 'Primary name_prefix is not defined' if (environment_definition.build.primary.name_prefix is not defined or \
          environment_definition.build.primary.name_prefix == none) else '' }}"
        poc: "{{ 'Primary octets is not defined' if (environment_definition.build.primary.octets is not defined or \
          environment_definition.build.primary.octets == none) else '' }}"
        snv: "{{ 'Secondary number of vms is not defined' if (environment_definition.build.disaster_recovery and \
          (environment_definition.build.secondary.number_of_lnxvm is not defined or environment_definition.build.secondary.number_of_lnxvm == none)) \
          else '' }}"
        snp: "{{ 'Secondary name_prefix is not defined' if (environment_definition.build.disaster_recovery and \
          (environment_definition.build.secondary.name_prefix is not defined or environment_definition.build.secondary.name_prefix == none)) else '' }}"
        soc: "{{ 'Secondary octets is not defined' if (environment_definition.build.disaster_recovery and \
          (environment_definition.build.secondary.octets is not defined or environment_definition.build.secondary.octets == none)) else '' }}"
        pdn: "{{ 'Primary Datacenter name is not defined' if (environment_definition.datacenter.primary.name is not defined or \
          environment_definition.datacenter.primary.name == none) else '' }}"
        pdh: "{{ 'Primary Datacenter resources is not defined' if (environment_definition.build.deployment_model != none and \
          environment_definition.build.deployment_model is search('a') and environment_definition.build.deployment_model is not search('h') and \
          (environment_definition.datacenter.primary.resources is not defined or environment_definition.datacenter.primary.resources == none)) else '' }}"
        pdc: "{{ 'Primary Datacenter cluster is not defined. Will use esxi hosts IPs to define the primary cluster name' if \
          (environment_definition.datacenter.primary.cluster == none and environment_definition.build.deployment_model != none and \
          environment_definition.build.deployment_model is search('a') and environment_definition.build.deployment_model is not search('h')) else '' }}"
        pdf: "{{ 'Primary Datacenter folder is not defined. Will use default folder instead' if \
          (environment_definition.datacenter.primary.folder == none and environment_definition.build.deployment_model != none and \
          environment_definition.build.deployment_model is search('h') and environment_definition.build.deployment_model is not search('a')) else '' }}"
        sdn: "{{ 'Secondary Datacenter name is not defined' if environment_definition.build.disaster_recovery and \
          (environment_definition.datacenter.secondary.name is not defined or environment_definition.datacenter.secondary.name == none) else '' }}"
        sdh: "{{ 'Secondary Datacenter resources is not defined' if (environment_definition.build.disaster_recovery and \
          environment_definition.build.deployment_model != none and environment_definition.build.deployment_model is search('a') and \
          environment_definition.build.deployment_model is not search('h') and (environment_definition.datacenter.secondary.resources is not defined or \
          environment_definition.datacenter.secondary.resources == none)) else '' }}"
        sdc: "{{ 'Secondary Datacenter cluster is not defined. Will use esxi hosts IPs to define the secondary cluster name' if \
          (environment_definition.build.disaster_recovery and environment_definition.datacenter.secondary.cluster == none and \
          environment_definition.build.deployment_model != none and environment_definition.build.deployment_model is search('a') and \
          environment_definition.build.deployment_model is not search('h')) else '' }}"
        sdf: "{{ 'Secondary Datacenter folder is not defined. Will use default folder instead' if \
          (environment_definition.build.disaster_recovery and environment_definition.datacenter.secondary.folder == none and \
          environment_definition.build.deployment_model != none and environment_definition.build.deployment_model is search('h') and \
          environment_definition.build.deployment_model is not search('a')) else '' }}"

    - name: Display values
      ansible.builtin.debug:
        msg: "{{ loop_item }}"
      when: loop_item != ''
      loop: [pdc, pdf, sdc, sdf]
      loop_control:
        loop_var: loop_item

    - name: Verify that all variables are defined
      ansible.builtin.assert:
        that:
          - vars[item] == ''
        fail_msg: "{{ vars[item] }}"
      loop: [bn, dm, dr, pnv, pnp, poc, snv, snp, soc, pdn, pdh, sdn, sdh]

    - name: Check if deployment model value is valid
      ansible.builtin.assert:
        that:
          - not environment_definition.build.deployment_model | lower | regex_search('a|h') == none
        fail_msg: "deployment_model is not valid. Only a and h are valid"

    - name: Display number of VMs
      ansible.builtin.debug:
        msg:
          - "environment_definition.build.{{ loop_item.name }}"
          - "{{ environment_definition['build'][loop_item.name | split('.') | first][loop_item.name | split('.') | last] }}"
      loop:
        - { 'name': 'primary.number_of_lnxvm', 'max_value': 100, 'state': "{{ 'active' if \
          ansible_play_hosts | reject('search', 'dr') | list | length >= 1 else 'disabled' }}" }
        - { 'name': 'secondary.number_of_lnxvm', 'max_value': "{{ 100 if environment_definition.build.disaster_recovery else 0 }}", 'state': "{{ 'active' if \
          environment_definition.build.disaster_recovery else 'disabled' }}" }
      loop_control:
        loop_var: loop_item
        label: "{{ 'number_of_' + loop_item.name }}"
      when:
        - loop_item.state == 'active'

    - name: Check if number of VMs value is valid
      ansible.builtin.assert:
        that:
          - "parval | int >= 1"
          - "parval | int <= loop_item.max_value | int"
          - "parval | int % 2 >= 0"
        fail_msg: "The value {{ environment_definition['build'][loop_item.name | split('.') | first][loop_item.name | split('.') | last] }} for \
          environment_definition.build.{{ loop_item.name }} is not valid. Only numbers >= 1 are valid"
      vars:
        parval: "{{ environment_definition['build'][loop_item.name | split('.') | first][loop_item.name | split('.') | last] }}"
      loop:
        - { 'name': 'primary.number_of_lnxvm', 'max_value': 100, 'state': "{{ 'active' if \
          ansible_play_hosts | reject('search', 'dr') | list | length >= 1 else 'disabled' }}" }
        - { 'name': 'secondary.number_of_lnxvm', 'max_value': "{{ 100 if environment_definition.build.disaster_recovery else 0 }}", 'state': "{{ 'active' if \
          environment_definition.build.disaster_recovery else 'disabled' }}" }
      loop_control:
        loop_var: loop_item
        label: "{{ 'number_of_' + loop_item.name }}"
      when:
        - loop_item.state == 'active'

    - name: Check if disaster recovery value is valid
      ansible.builtin.assert:
        that:
          - not environment_definition.build.disaster_recovery | lower | regex_search('yes|no|true|false') == none
        fail_msg: "disaster_recovery is not valid. Only yes/no/true/false are valid"

    - name: Check if primary octets value is valid
      ansible.builtin.assert:
        that:
          - not environment_definition.build.primary.octets | regex_search('^\d{1,3}\.\d{1,3}\.\d{1,3}$') == none
        fail_msg: "primary octets is not valid. Only three octets (xxx.xxx.xxx) format is valid"

    - name: Check if secondary octets value is valid
      ansible.builtin.assert:
        that:
          - not environment_definition.build.secondary.octets | regex_search('^\d{1,3}\.\d{1,3}\.\d{1,3}$') == none
        fail_msg: "secondary octets is not valid. Only three octets (xxx.xxx.xxx) format is valid"
      when:
        - environment_definition.build.disaster_recovery
        - environment_definition.build.secondary.octets != none

    - name: Verify that primary datacenter is supported
      ansible.builtin.assert:
        that:
          - "datacenters[environment_definition.datacenter.primary.name] is defined"
        fail_msg: "The primary datacenter selected, {{ environment_definition.datacenter.primary.name }}, is not in the list of supported datacenters. \
          Aborting!"

    - name: Verify that secondary datacenter is supported
      ansible.builtin.assert:
        that:
          - "datacenters[environment_definition.datacenter.secondary.name] is defined"
        fail_msg: "The secondary datacenter selected, {{ environment_definition.datacenter.secondary.name }}, is not in the list of supported datacenters. \
          Aborting!"
      when:
        - environment_definition.build.disaster_recovery

    - name: Verify if selected primary datacenter supports deployment model
      ansible.builtin.assert:
        that:
          - "datacenters[environment_definition.datacenter.primary.name]['deptype'] is search(environment_definition.build.deployment_model[-1:])"
        fail_msg: "The datacenter selected, {{ environment_definition.datacenter.primary.name }}, only supports the {{ 'on-prem' if \
          datacenters[environment_definition.datacenter.primary.name]['deptype'] is search('a') else 'hosted' }} deployment model. Aborting!"

    - name: Verify if selected secondary datacenter supports deployment model
      ansible.builtin.assert:
        that:
          - "datacenters[environment_definition.datacenter.secondary.name]['deptype'] is search(environment_definition.build.deployment_model[-1:])"
        fail_msg: "The datacenter selected, {{ environment_definition.datacenter.secondary.name }}, only supports the {{ 'on-prem' if \
          datacenters[environment_definition.datacenter.secondary.name]['deptype'] is search('a') else 'hosted' }} deployment model. Aborting!"
      when:
        - environment_definition.build.disaster_recovery

    - name: Verify validity of resources
      when: environment_definition.build.deployment_model is search('a')
      block:
        - name: Verify validity of primary resources
          block:
            - name: Verify that primary resources are separated
              ansible.builtin.assert:
                that:
                  - environment_definition.datacenter.primary.resources | regex_search('\d{1,3}[,|;|\s]\s?\d{1,3}')
                fail_msg: "The primary resources list {{ environment_definition.datacenter.primary.resources }} is not a valid IP address list. Aborting!"
              when:
                - environment_definition.datacenter.primary.resources | regex_search('^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}.*\d{1,3}\.')
            - name: Define the primary resources list separator
              ansible.builtin.set_fact:
                pseparator: "{{ ', ' if environment_definition.datacenter.primary.resources is search(', ') else ',' if \
                  environment_definition.datacenter.primary.resources is search(',') else '; ' if environment_definition.datacenter.primary.resources is \
                  search('; ') else ';' if environment_definition.datacenter.primary.resources is search(';') else ' ' }}"
            - name: Verify that primary resources are valid
              ansible.builtin.assert:
                that:
                  - ip_item | ansible.utils.ipaddr
                fail_msg: "The primary resources list {{ environment_definition.datacenter.primary.resources }} is not a valid IP address list. Aborting!"
              loop: "{{ environment_definition.datacenter.primary.resources.split(pseparator) }}"
              loop_control:
                loop_var: ip_item
              when: ip_item | regex_search('^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}')
            - name: Verify that there are enough primary resources
              ansible.builtin.assert:
                that:
                  - environment_definition.datacenter.primary.resources.split(pseparator) | length >= required_number_resources | int
                fail_msg: "The resources list contains {{ environment_definition.datacenter.primary.resources.split(pseparator) | length }} hosts. \
                  Required number of resources is {{ required_number_resources }}. Aborting!"
              vars:
                required_number_resources: '1'
            - name: Reformat primary resources list
              ansible.builtin.set_fact:
                primary_resources: "{{ primary_resources | default([]) + [ip_item] }}"
              loop: "{{ environment_definition.datacenter.primary.resources.split(pseparator) }}"
              loop_control:
                loop_var: ip_item
        - name: Verify validity of secondary resources
          when:
            - environment_definition.build.disaster_recovery
          block:
            - name: Verify that secondary resources are separated
              ansible.builtin.assert:
                that:
                  - environment_definition.datacenter.secondary.resources | regex_search('\d{1,3}[,|;|\s]\s?\d{1,3}')
                fail_msg: "The secondary resources list {{ environment_definition.datacenter.secondary.resources }} is not a valid IP address list. Aborting!"
              when:
                - environment_definition.datacenter.secondary.resources | regex_search('^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}.*\d{1,3}\.')
            - name: Define the secondary resources list separator
              ansible.builtin.set_fact:
                sseparator: "{{ ', ' if environment_definition.datacenter.secondary.resources is search(', ') else ',' if \
                  environment_definition.datacenter.secondary.resources is search(',') else '; ' if environment_definition.datacenter.secondary.resources is \
                  search('; ') else ';' if environment_definition.datacenter.secondary.resources is search(';') else ' ' }}"
            - name: Verify that secondary resources are valid
              ansible.builtin.assert:
                that:
                  - ip_item | ansible.utils.ipaddr
                fail_msg: "The secondary resources list {{ environment_definition.datacenter.secondary.resources }} is not a valid IP address list. Aborting!"
              loop: "{{ environment_definition.datacenter.secondary.resources.split(sseparator) }}"
              loop_control:
                loop_var: ip_item
              when:
                - ip_item | regex_search('^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}')
            - name: Verify that there are enough secondary resources
              ansible.builtin.assert:
                that:
                  - environment_definition.datacenter.secondary.resources.split(sseparator) | length >= required_number_resources | int
                fail_msg: "The resources list contains {{ environment_definition.datacenter.secondary.resources.split(sseparator) | length }} hosts. \
                  Required number of resources is {{ required_number_resources }}. Aborting!"
              vars:
                required_number_resources: '1'
            - name: Reformat secondary resources list
              ansible.builtin.set_fact:
                secondary_resources: "{{ secondary_resources | default([]) + [ip_item] }}"
              loop: "{{ environment_definition.datacenter.secondary.resources.split(sseparator) }}"
              loop_control:
                loop_var: ip_item

    - name: Verify resources are not provided
      when: environment_definition.build.deployment_model is search('h')
      block:
        - name: Verify that primary resources are not provided
          ansible.builtin.assert:
            that:
              - environment_definition.datacenter.primary.resources == none
            fail_msg: "The resources list {{ environment_definition.datacenter.primary.resources }} is not valid for a hosted deployment. Aborting!"
        - name: Verify that secondary resources are not provided
          ansible.builtin.assert:
            that:
              - environment_definition.datacenter.secondary.resources == none
            fail_msg: "The resources list {{ environment_definition.datacenter.secondary.resources }} is not valid for a hosted deployment. Aborting!"
          when:
            - environment_definition.build.disaster_recovery

    - name: Check if host's IP address is private
      ansible.builtin.shell:
        cmd: set -o pipefail && echo {{ lookup('env', 'MYIP') }} | grep '192\.168\.' || echo 'Not local'
        executable: /bin/bash
      register: localhost_ip
      changed_when: false

    - name: Detect directory owner
      ansible.builtin.shell:
        cmd: set -o pipefail && ls -ld {{ auto_dir }}/Bash | awk '{print $3}' | xargs
        executable: /bin/bash
      register: dir_owner
      changed_when: false

    - name: Detect directory group
      ansible.builtin.shell:
        cmd: set -o pipefail && ls -ld {{ auto_dir }}/Bash | awk '{print $4}' | xargs
        executable: /bin/bash
      register: dir_group
      changed_when: false

    - name: Generate build inventory
      ansible.builtin.copy:
        src: "files/inventory{{ environment_definition.build.deployment_model }}/"
        dest: "{{ auto_dir + '/inventories/' + SYS_NAME | basename | splitext | first | lower }}"
        owner: "{{ dir_owner.stdout }}"
        group: "{{ dir_group.stdout }}"
        mode: '644'
      become: true

    - name: Add disaster recovery to build inventory
      ansible.builtin.copy:
        src: "files/drinventory{{ environment_definition.build.deployment_model }}/"
        dest: "{{ auto_dir + '/inventories/' + SYS_NAME | basename | splitext | first | lower }}"
        owner: "{{ dir_owner.stdout }}"
        group: "{{ dir_group.stdout }}"
        mode: '644'
      become: true
      when: environment_definition.build.disaster_recovery

    - name: Customize inventory
      ansible.builtin.template:
        src: "{{ tmpl_item.name }}"
        dest: "{{ tmpl_item.dest }}"
        owner: "{{ dir_owner.stdout }}"
        group: "{{ dir_group.stdout }}"
        mode: '644'
      loop:
        - { name: 'templates/all.j2', dest: "{{ auto_dir + '/inventories/' + SYS_NAME | basename | splitext | first | lower + '/group_vars/all.yml' }}" }
        - { name: 'templates/hosts.j2', dest: "{{ auto_dir + '/inventories/' + SYS_NAME | basename | splitext | first | lower + '/hosts.yml' }}" }
      loop_control:
        loop_var: tmpl_item
      become: true
