---
# Task file to delete DNS records
- block:
  - block:
    - block:
      - name: Remove priamry DNS records
        ansible.builtin.shell: |
          {% if hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] is search ('PAE-HX-DC') %}
          sshpass -p {{ svc_password }} ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -T -l {{ svc_username }} {{ lookup('env','MYIP') }} <<EOF
          {% endif %}
          nsupdate {% if hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] is search ('PAE-HX-DC') %}-g {% endif %}<<EOC
          server {{ sysconfig.primary.dns_servers[0] }}
          update delete {{ vm.name }}.{{ sysconfig.primary.domain_name }} A
          send
          EOC
          {% if hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] is search ('PAE-HX-DC') %}
          EOF
          {% endif %}
        register: reg_pdr
        failed_when: reg_pdr.rc != 0 and reg_pdr.stderr is not search('tsig verify failure')
        until: reg_pdr is succeeded
        delay: 10
        no_log: yes
      rescue:
      - ansible.builtin.debug:
          msg: "{{ reg_pdr|replace(svc_password,'obfuscated') if svc_password != '' else reg_pdr }}"
      always:
      - ansible.builtin.assert:
          that: reg_pdr is succeeded
    - block:
      - name: Remove primary reverse DNS records
        ansible.builtin.shell: |
          {% if hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] is search ('PAE-HX-DC') %}
          sshpass -p {{ svc_password }} ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -T -l {{ svc_username }} {{ lookup('env','MYIP') }} <<EOF
          {% endif %}
          nsupdate {% if hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] is search ('PAE-HX-DC') %}-g {% endif %}<<EOC
          server {{ sysconfig.primary.dns_servers[0] }}
          zone {{ (netconfig.nic1.ipaddress if vm.name is not search('csr') else netconfig.nic3.ipaddress).split('.')[:-1] | reverse | join('.') + '.in-addr.arpa' }}
          update delete {{ (netconfig.nic1.ipaddress if vm.name is not search('csr') else netconfig.nic3.ipaddress).split('.') | reverse | join('.') + '.in-addr.arpa' }} PTR
          send
          EOC
          {% if hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] is search ('PAE-HX-DC') %}
          EOF
          {% endif %}
        register: reg_prdr
        failed_when: reg_prdr.rc != 0 and reg_prdr.stderr is not search('tsig verify failure')
        until: reg_prdr is succeeded
        delay: 10
        no_log: yes
      rescue:
      - ansible.builtin.debug:
          msg: "{{ reg_prdr|replace(svc_password,'obfuscated') if svc_password != '' else reg_prdr }}"
      always:
      - ansible.builtin.assert:
          that: reg_prdr is succeeded
        when: hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] is search ('PAE-HX-DC')
    when:
      - "'stack' in group_names"
  - block:
    - block:
      - name: Remove secondary DNS records
        ansible.builtin.shell: |
          {% if hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] is search ('PAE-HX-DC') %}
          sshpass -p {{ svc_password }} ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -T -l {{ svc_username }} {{ lookup('env','MYIP') }} <<EOF
          {% endif %}
          nsupdate {% if hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] is search ('PAE-HX-DC') %}-g {% endif %}<<EOC
          server {{ sysconfig.secondary.dns_servers[0] }}
          update delete {{ vm.name }}.{{ sysconfig.secondary.domain_name }} A
          send
          EOC
          {% if hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] is search ('PAE-HX-DC') %}
          EOF
          {% endif %}
        register: reg_sdr
        failed_when: reg_sdr.rc != 0 and reg_sdr.stderr is not search('tsig verify failure')
        until: reg_sdr is succeeded
        delay: 10
        no_log: yes
      rescue:
      - ansible.builtin.debug:
          msg: "{{ reg_sdr|replace(svc_password,'obfuscated') if svc_password != '' else reg_sdr }}"
      always:
      - ansible.builtin.assert:
          that: reg_sdr is succeeded
    - block:
      - name: Remove secondary reverse DNS records
        ansible.builtin.shell: |
          {% if hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] is search ('PAE-HX-DC') %}
          sshpass -p {{ svc_password }} ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -T -l {{ svc_username }} {{ lookup('env','MYIP') }} <<EOF
          {% endif %}
          nsupdate {% if hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] is search ('PAE-HX-DC') %}-g {% endif %}<<EOC
          server {{ sysconfig.secondary.dns_servers[0] }}
          zone {{ (netconfig.nic1.ipaddress if vm.name is not search('csr') else netconfig.nic3.ipaddress).split('.')[:-1] | reverse | join('.') + '.in-addr.arpa' }}
          update delete {{ (netconfig.nic1.ipaddress if vm.name is not search('csr') else netconfig.nic3.ipaddress).split('.') | reverse | join('.') + '.in-addr.arpa' }} PTR
          send
          EOC
          {% if hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] is search ('PAE-HX-DC') %}
          EOF
          {% endif %}
        register: reg_srdr
        failed_when: reg_srdr.rc != 0 and reg_srdr.stderr is not search('tsig verify failure')
        until: reg_srdr is succeeded
        delay: 10
        no_log: yes
      rescue:
      - ansible.builtin.debug:
          msg: "{{ reg_srdr|replace(svc_password,'obfuscated')if svc_password != '' else reg_srdr }}"
      always:
      - ansible.builtin.assert:
          that: reg_srdr is succeeded
        when: hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] is search ('PAE-HX-DC')
    when:
      - build.disaster_recovery
      - "'dr' in group_names"
  delegate_to: localhost
  tags: [ 'infra_dns_records', 'vm_creation' ]
