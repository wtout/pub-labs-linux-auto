---
# tasks to deploy VM from ISO
- block:
  - name: Deploy VM from ISO
    community.vmware.vmware_guest:
      hostname: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['address'] }}"
      username: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['username'] }}"
      password: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['password'] }}"
      datacenter: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] }}"
      cluster: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['cluster'] }}"
      folder: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] + '/vm' + (('' if fldr_name is regex('^/') else '/') + fldr_name if fldr_name != '' else '') }}"
      guest_id: "{{ ('rhel' if build.version.os_iso|lower is search('almalinux') else build.version.os_iso|split('-')|first|lower) + (((build.version.os_iso|split('-'))[1]|split('.')|first + '_') if build.version.os_iso|lower is search('almalinux|centos') else '') }}64Guest"
      name: "{{ vm.name }}"
      state: poweredon
      validate_certs: no
      disk:
        - size_gb: "{{ vm.disk0 }}"
          type: "{{ vm.disk_provisioning if vm.disk_provisioning != '' else 'thin' if hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] is search('PAE-HX-DC|Staging') else 'thick' }}"
          datastore: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datastore_cluster'] if hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datastore_cluster'] != '' else vm_ds }}"
          controller_number: 0
          controller_type: 'lsilogic'
          unit_number: 0
      hardware:
        memory_mb: "{{ vm.memory|int * 1024 }}"
        num_cpus: "{{ vm.cpu|int }}"
        boot_firmware: "bios"
        version: 'latest'
      networks: "{{ nics_list }}"
      advanced_settings: "{{ advsets_list }}"
      cdrom: "{{ cdrom_list }}"
    register: deploy_iso
    environment:
      http_proxy: ''
      https_proxy: ''
    throttle: "{{ 5 if hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['deptype'] == 'h' else 0 }}"
    until: deploy_iso is succeeded
    retries: 5
    delay: 10
  - name: Wait for port 22 to become open and contain "OpenSSH"
    ansible.builtin.wait_for:
      port: 22
      host: "{{ netconfig.nic1.ipaddress if netconfig.nic1.ipaddress != '' else netconfig.nic2.ipaddress }}"
      search_regex: OpenSSH
      delay: 10
      timeout: "{{ 180 if build.version.os_iso|lower is search('ubuntu') else 1800 }}"
      sleep: 10
    register: reg_openssh
    when:
      - deploy_iso is succeeded
      - vmguest_info is failed
  - block:
    - name: wait for VM creation process to finish
      ansible.builtin.shell: |
        sshpass -p {{ ansible_ssh_pass }} ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -T -l {{ ansible_user }} {{ netconfig.nic1.ipaddress if netconfig.nic1.ipaddress != '' else netconfig.nic2.ipaddress }} <<EOF
        ls /var/log/installer/build.complete
        EOF
      register: reg_vm_ready
      until: reg_vm_ready is succeeded
      retries: 9
      delay: 170
      no_log: yes
    rescue:
    - ansible.builtin.debug:
        msg: "{{ reg_vm_ready|replace(ansible_ssh_pass,'obfuscated') if ansible_ssh_pass != '' else reg_vm_ready }}"
    always:
    - ansible.builtin.assert:
        that: reg_vm_ready is succeeded
    when:
      - reg_openssh is succeeded
      - build.version.os_iso|lower is search('ubuntu')
      - deploy_iso is succeeded
      - vmguest_info is failed
  delegate_to: localhost
  tags: vm_creation
